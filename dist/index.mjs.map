{"version":3,"file":"index.mjs","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/index.js"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = (function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof Symbol !== \"undefined\") {\n\t\tvar iteratorSymbol = Symbol.iterator;\n\t\tif (iteratorSymbol && (iteratorSymbol in target)) {\n\t\t\tvar iterator = target[iteratorSymbol](), step, pact, reject;\n\t\t\tfunction _cycle(result) {\n\t\t\t\ttry {\n\t\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (pact) {\n\t\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpact = result;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t_cycle();\n\t\t\tif (iterator.return) {\n\t\t\t\tvar _fixup = function(value) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\t\titerator.return();\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch(e) {\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t\tif (pact && pact.then) {\n\t\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t_fixup();\n\t\t\t}\n\t\t\treturn pact;\n\t\t}\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"value is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof Symbol !== \"undefined\") {\n\t\tvar asyncIteratorSymbol = Symbol.asyncIterator;\n\t\tif (asyncIteratorSymbol && (asyncIteratorSymbol in target)) {\n\t\t\tvar pact = new _Pact();\n\t\t\tvar iterator = target[asyncIteratorSymbol]();\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t\treturn pact;\n\t\t\tfunction _resumeAfterBody(result) {\n\t\t\t\tif (check && !check()) {\n\t\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t\t}\n\t\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t\t}\n\t\t\tfunction _resumeAfterNext(step) {\n\t\t\t\tif (step.done) {\n\t\t\t\t\t_settle(pact, 1);\n\t\t\t\t} else {\n\t\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction _reject(error) {\n\t\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t\t}\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = (function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype[Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))] = function() {\n\t\treturn this;\n\t};\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","'use strict'\n\nimport teme from 'teme'\n\n//\n// Field state.\n//\n// Has two inputs sreams of data\n//\n// - value (from backend)\n// - text (from user)\n//\n// goes through\n// - validation (of input)\n// - parsing (of input)\n// - formatting (of value)\n//\n// and produces output stream of\n// - value (to backend)\n// - text (to user)\n// - error (to user)\n//\nexport class FieldState {\n  constructor (opts = {}) {\n    this.validator = ensureArray(opts.validator || [])\n    this.parser = opts.parser\n    this.formatter = opts.formatter\n    // the two input streams\n    this.value = teme()\n    this.text = teme()\n\n    this.value.subscribe(v => this._updateValue(v))\n    this.text.subscribe(t => this._updateText(t))\n    this.update = teme()\n    this.state = this.update.scan((s, p) => Object.assign({}, s, p), {})\n    this.value(opts.value)\n  }\n\n  _updateValue (value) {\n    // new value supplied, so format text accordingly\n    const text = format(value, this.formatter)\n    this.update({ error: '', value, text, dirty: false })\n  }\n\n  _updateText (text) {\n    // new text value supplied, so add it, and queue validation\n    this.update({ text, dirty: true })\n    Promise.resolve().then(() => this.validate())\n  }\n\n  // can be called by user - async validate and updates status\n  // message\n  //\n  // returns true if valid\n  async validate () {\n    let error = ''\n    let text = this.state().text || ''\n    for (let i = 0; i < this.validator.length; i++) {\n      const validator = this.validator[i]\n      error = await validator(text)\n      if (error) break\n    }\n    if (!error) {\n      const value = parse(text, this.parser)\n      text = format(value, this.formatter)\n      this.update({ error, value, text })\n      return true\n    } else {\n      this.update({ error, text })\n      return false\n    }\n  }\n}\n\nexport class FormState {\n  constructor (fields = {}) {\n    this.fields = fields\n    this.state = teme\n      .combine(\n        () => this._updateState(),\n        Object.values(fields).map(f => f.state)\n      )\n      .dedupe(shallow)\n  }\n\n  _updateState () {\n    return Object.values(this.fields).reduce(\n      ({ error, dirty }, fld) => ({\n        error: error || fld.state().error,\n        dirty: dirty || fld.state().dirty\n      }),\n      { error: '', dirty: false }\n    )\n  }\n\n  validate () {\n    // force validation of each field, return true if all valid\n    return Promise.all(\n      Object.values(this.fields).map(fld => fld.validate())\n    ).then(valids => valids.every(Boolean))\n  }\n\n  set (data) {\n    Object.entries(this.fields).forEach(([k, fld]) => fld.value(data[k]))\n  }\n\n  getChanges () {\n    return Object.entries(this.fields).reduce((o, [k, fld]) => {\n      const { dirty, value } = fld.state()\n      if (dirty) o[k] = value\n      return o\n    }, {})\n  }\n\n  getValues () {\n    return Object.entries(this.fields).reduce((o, [k, fld]) => {\n      o[k] = fld.state().value\n      return o\n    }, {})\n  }\n}\n\nfunction format (value, formatter) {\n  if (formatter) return formatter(value)\n  if (value == null) return ''\n  return String(value)\n}\n\nfunction parse (text, parser) {\n  return parser ? parser(text) : text\n}\n\nfunction ensureArray (o) {\n  return Array.isArray(o) ? o : [o]\n}\n\nfunction shallow (a, b) {\n  return (\n    a === b ||\n    (a &&\n      b &&\n      typeof a === 'object' &&\n      typeof b === 'object' &&\n      Object.keys(b).every(k => Object.prototype.hasOwnProperty.call(a, k)) &&\n      Object.keys(a).every(k => b[k] === a[k]))\n  )\n}\n"],"names":["_Pact","prototype","then","onFulfilled","onRejected","result","state","this","s","callback","_settle","v","e","o","_this","value","pact","bind","observer","_isSettledPact","thenable","_earlyReturn","_AsyncGenerator","entry","_entry","_pact","_resolve","_return","_promise","_wrapReturnedValue","done","_wrapYieldedValue","Symbol","asyncIterator","_yield","next","Promise","resolve","returnValue","error","return","throw","reject","FieldState","constructor","opts","validator","Array","isArray","parser","formatter","teme","text","subscribe","_updateValue","t","_updateText","update","scan","p","Object","assign","format","validate","parse","i","test","body","stage","shouldContinue","updateValue","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","length","FormState","fields","combine","_updateState","values","map","f","dedupe","shallow","String","a","b","keys","every","k","hasOwnProperty","call","reduce","ref","fld","dirty","all","valids","Boolean","set","data","entries","forEach","getChanges","getValues"],"mappings":"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"}